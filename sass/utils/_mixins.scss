@mixin section($pt: 120px, $pb: $pt) {
  padding-top: $pt;
  padding-bottom: $pb;
}

@mixin fonts($size: false, $lh: false, $weight: false, $ls: 0.1em, $color: false) {
  @if $size {
    font-size: $size;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh / $size;
  }
  @if $ls {
    letter-spacing: $ls;
  }
  @if $color {
    color: $color;
  }
}

@mixin transition($property...) {
  transition-property: $property;
  transition-duration: 300px;
  transition-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);
}

@mixin positioningrElement($positionX: 50%, $positionY: $positionX, $mode: center) {
  position: absolute;
  left: $positionX;
  top: $positionY;
  @if ($mode == 'center') {
    transform: translateX(-1 * $positionX) translateY(-1 * $positionY);
  }
  @if ($mode == 'right') {
    transform: translateX(-1 * $positionX);
  }
}

@function getColor($key) {
  @return map-get($colors, $key);
}

@mixin mq($type) {
  $phone: 480px;
  $tablet: 768px;
  $desktop: 1200px;

  @if $type == 'phone' {
    @media screen and (min-width: $phone) {
      @content;
    }
  }
  @if $type == 'phone-only' {
    @media screen and (max-width: #{$tablet - 0.02}) {
      @content;
    }
  }
  @if $type == 'tablet' {
    @media screen and (min-width: $tablet) {
      @content;
    }
  }
  @if $type == 'tablet-only' {
    @media screen and (max-width: #{$desktop - 0.02}) {
      @content;
    }
  }
  @if $type == 'desktop' {
    @media screen and (min-width: $desktop) {
      @content;
    }
  }
}
